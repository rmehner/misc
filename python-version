#!/usr/bin/env bash

# Filename:      python-version.sh
# Description:   Manage version information for a python package.
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Sun 2010-09-19 20:39:00 (-0400)

# This script is used by another deployment script, but could be used by
# itself. It simply increments the version number specified
# (major/minor/build).

# IMPORTS {{{1

source bashful-input
source bashful-messages
source bashful-modes

# VARIABLES {{{1

SCRIPT_NAME=$(basename "$0" .sh)
SCRIPT_USAGE="Manage version information for a python package."
SCRIPT_OPTIONS="
-n            Dry-run.

-V VERSION    Set version to VERSION.

-M            Increment major version (x.0.0).
-m            Increment minor version (0.x.0).
-b            Increment build version (0.0.x).
"

interactive ${INTERACTIVE:-1}
verbose     ${VERBOSE:-1}

# COMMAND-LINE OPTIONS {{{1

unset OPTIND
while getopts ":hifvqMmbnV:" option; do
    case $option in
        M) MAJOR=-M ;;
        m) MINOR=-m ;;
        b) BUILD=-b ;;
        n) DRYRUN=1 ;;
        V) VERSION_NEW=$OPTARG ;;

        i) interactive 1 ;;
        f) interactive 0 ;;

        v) verbose 1 ;;
        q) verbose 0 ;;

        h) usage 0 ;;
        *) usage 1 ;;
    esac
done && shift $(($OPTIND - 1))

#}}}1

SETUP=${1:-$PWD}/setup.py

[[ -f $SETUP ]] || exit 1

NAME=$(python "$SETUP" --name)
VERSION=$(python "$SETUP" --version)

if [[ ! $VERSION_NEW ]]; then
    DEFAULT=$(version $MAJOR $MINOR $BUILD "$VERSION")
    VERSION_NEW=$(input -c -p "Enter version for '$NAME'" -d "$DEFAULT")
fi

if [[ $VERSION != ${VERSION_NEW:-$VERSION} ]]; then
    info -c "$NAME: $VERSION -> $VERSION_NEW"
    if ! truth $DRYRUN; then
        sed -i "s/\(version[ \t]*=[ \t]*\)\(['\"]\+\).*\2/\1\2$VERSION_NEW\2/" "$SETUP"
    fi
fi
